
const int buttonPin = 0;       // Button is connected to GPIO 0
const int ledPins[] = {16, 17, 18};  // LEDs connected to GPIO 2, 4, and 33
const int outputPin = 23;      // Output pin for the square wave signal
const int baseFrequency = 1000; // Base frequency of 1 kHz
int pressCount = 0;                  // How many times the button was pressed (0 to 7)
unsigned long lastDebounceTime = 0;  // Last time the button press was accepted
const int debounceDelay = 50;        // Minimum delay between valid presses (ms)
int lastButtonState = LOW;           // Last state of the button
int currentFrequency = 0;            // Current square wave frequency in Hz
unsigned long lastToggleTime = 0;    // Time when the output last toggled
bool outputState = LOW;              // Current state of the output pin

void setup() {
  // Set the button pin as a simple input
  pinMode(buttonPin, INPUT);

  // Set each LED pin as an output and turn them off
  for (int i = 0; i < 3; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW);
  }

  // Set the square wave output pin as an output and turn it off
  pinMode(outputPin, OUTPUT);
  digitalWrite(outputPin, LOW);
}

void loop() {
  // Read the button state
  int buttonState = digitalRead(buttonPin);
  unsigned long currentTime = millis();

  // Check if the button state changed from not pressed to pressed
  if (buttonState != lastButtonState) {
    // If the button is now HIGH and enough time has passed
    if (buttonState == HIGH && (currentTime - lastDebounceTime) > debounceDelay) {
      lastDebounceTime = currentTime;
      pressCount = (pressCount + 1) % 8;  // Increase count 

      // Calculate the new frequency
      if (pressCount > 0) {
        currentFrequency = baseFrequency * (1 << (pressCount - 1));
      } else {
        currentFrequency = 0;
      }

      // Update each LED based on the bits of pressCount
      digitalWrite(ledPins[0], (pressCount & 0x01) ? HIGH : LOW);
      digitalWrite(ledPins[1], (pressCount & 0x02) ? HIGH : LOW);
      digitalWrite(ledPins[2], (pressCount & 0x04) ? HIGH : LOW);
    }
  }

  lastButtonState = buttonState;  // Save the button state for next time

  // Generate a continuous square wave at the current frequency
  if (currentFrequency == 0) {
    digitalWrite(outputPin, LOW);  // If frequency is 0, keep the output off
  } else {
    // Calculate half the period in microseconds
    unsigned long halfPeriod = 500000UL / currentFrequency;

    // If the time since the last toggle is greater than the half period, toggle the output
    if (micros() - lastToggleTime >= halfPeriod) {
      lastToggleTime = micros();
      outputState = !outputState;
      digitalWrite(outputPin, outputState);
    }
  }
}

// GENERAL INFO ABOUT CODE

// BUTTON PRESS TRIGGERS INTERRUPT, INCREMENTS pressCount and updates LED's
// shows pressCount in binary
// starts at 1kHz and doubles each press
// uses delayMicroseconds for accurate timing
// Debounce handling ensures button register properly
// pressCount resets to 0 after reaching 7
